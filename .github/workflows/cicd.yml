name: CI/CD

on:
  push:
    branches: [ "MOITBE-*", "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: make env.properties
        run: |
          echo "${{ secrets.ENV_PROPERTIES }}" > $GITHUB_WORKSPACE/env.properties
        shell: bash


      - name: Build with Gradle
        run: ./gradlew build -x test

     # 현재시간가져오기
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # docker build & push
      # Dockerfile을 통해 이미지화
      # push to docker hub
      - name: Docker build & push to dev
#        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'dev')
        run: |
          docker login -u ${{ secrets.DOCKER_EMAIL }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/moit . 
          docker push ${{ secrets.DOCKER_USERNAME }}/moit

      ## pull to develop
      - name: Pull to dev
        uses: appleboy/ssh-action@master
        id: pull-dev
#        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'dev')
        with:
          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu # ubuntu
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/moit
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/moit
            sudo docker image prune -f

#
#  docker-pull-and-run:
#    runs-on: [self-hosted, dev]
#    if: ${{ needs.CI-CD.result == 'success' }}
#    needs: [ CI-CD ]
#    steps:
#      - name: Set up AWS CLI
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Install AWS CLI
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y awscli
#
#      - name : 배포 스크립트 실행
#        run: |
#          sh /deploy.sh
#          sudo docker image prune -f